import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class ProjectDriver {
  static Scanner scanner = new Scanner(System.in);
  static Set<String> studentIds = new HashSet<>();
  static Map<String, Student> students = new HashMap<>();

  public static void main(String[] args) {
    boolean exit = false;
    while (!exit) {
      System.out.println("-------------------");
      System.out.println("Main Menu");
      System.out.println("1 : Student Management");
      System.out.println("2 : Course Management");
      System.out.println("0 : Exit");
      System.out.print("\nEnter your selection: ");
      int choice = scanner.nextInt();
      switch (choice) {
        case 1:
          studentManagementMenu();
          break;
        case 2:
          courseManagementMenu();
          break;
        case 0:
          exit = true;
          break;
        default:
          System.out.println("Invalid option. Please try again.");
      }
    }
    scanner.close();
  }

  public static void studentManagementMenu() {
	    boolean exit = false;
	    while (!exit) {
	      System.out.println("-------------------");
	      System.out.println("Student Management Menu:");
	      System.out.println("A - Add a student");
	      System.out.println("B - Delete a Student");
	      System.out.println("C - Print Fee Invoice");
	      System.out.println("D - Print List of Students");
	      System.out.println("X - Back to main menu");
	      System.out.print("\nEnter your selection: ");
	      String option = scanner.next().toUpperCase();

	      switch (option) {
	        case "A":
	          try {
	            addStudent();
	          } catch (IdException e) {
	            System.out.println(e.getMessage());
	          }
	          break;
	        case "B":
	          deleteStudent();
	          break;
	        case "C":
	          printFeeInvoice();
	          break;
	        case "D":
	          printListOfStudents();
	          break;
	        case "X":
	          exit = true;
	          break;
	        default:
	          System.out.println("Invalid option. Please try again.");
	      }
	    }
	  }

	  public static void addStudent() throws IdException {
	    System.out.print("Enter Student’s ID: ");
	    String id = scanner.next();

	    // Check for duplicate ID
	    if (studentIds.contains(id)) {
	      throw new IdException();
	    }

	    // Validate the format of the ID
	    if (!isValidIdFormat(id)) {
	      throw new IdException();
	    }

	    // Add the ID to the set
	    studentIds.add(id);

	    System.out.print("Enter Student's Type (PhD, MS or Undergrad): ");
	    String stdType = scanner.next().toLowerCase();
	    System.out.println("Enter Remaining information: ");
	    String remainingInfo = scanner.nextLine();
	    remainingInfo = scanner.nextLine();

	    // Split the information by |
	    String[] infoArray = remainingInfo.split("\\|");

	    switch (stdType) {
	      case "phd":
	        if (infoArray.length == 4) {
	          createPhdStudent(id, infoArray);
	        } else {
	          System.out.println("Invalid format for Ph.D. student information.");
	        }
	        break;
	      case "ms":
	        if (infoArray.length == 2) {
	          createMsStudent(id, infoArray);
	        } else {
	          System.out.println("Invalid format for MS student information.");
	        }
	        break;
	      case "undergrad":
	        if (infoArray.length == 2) {
	          createUndergradStudent(id, infoArray);
	        } else {
	          System.out.println("Invalid format for undergraduate student information.");
	        }
	        break;
	      default:
	        System.out.println("Invalid student type.");
	    }
	  }

	  // Method to validate the format of the ID
	  private static boolean isValidIdFormat(String id) {
	    return id.matches("[a-zA-Z]{2}\\d{4}");
	  }


  public static void createPhdStudent(String id, String[] infoArray) {
    String name = infoArray[0].trim();
    String advisor = infoArray[1].trim();
    String topic = infoArray[2].trim();
    String classCode = infoArray[3].trim();

    List<String> classCodes = Arrays.asList(classCode.split(","));

    PhdStudent phdStudent = new PhdStudent(name, id, advisor, topic, classCodes);

    students.put(id, phdStudent);
  }

  public static void createMsStudent(String id, String[] infoArray) {
	    String name = infoArray[0].trim();
	    String course = infoArray[1].trim();

	    double totalCost = calculateTotalCost(course, 300.00); // Assuming $300 per credit hour for MS students

	    MsStudent msStudent = new MsStudent(name, course, totalCost);

	    students.put(id, msStudent);
	}

  public static void createUndergradStudent(String id, String[] infoArray) {
	    String name = infoArray[0].trim();
	    String course = infoArray[1].trim();

	    UndergraduateStudent undergradStudent = new UndergraduateStudent(name, course, null);

	    students.put(id, undergradStudent);
	  }

  public static double calculateTotalCost(String course, double costPerCredit) {
	    double totalCost = 0.0;

	    try {
	        List<String> lines = Files.readAllLines(Paths.get("lect.txt"));
	        for (String line : lines) {
	            String[] parts = line.split(",");
	            if (parts[1].trim().equals(course)) { // Using parts[1] to compare with the course code
	                double credits = Double.parseDouble(parts[parts.length - 1].trim()); // Read the last number as credits
	                totalCost += credits * costPerCredit;
	            }
	        }
	    } catch (IOException e) {
	        System.out.println("Error reading file: " + e.getMessage());
	    }

	    return totalCost;
	}


  public static void deleteStudent() {
    System.out.print("Enter Student’s ID: ");
    String id = scanner.next();

    boolean deleted = delete(id);
    if (deleted) {
      System.out.println("Student with ID " + id + " has been deleted.");
    } else {
      System.out.println("Student with ID " + id + " not found.");
    }
  }

  public static boolean delete(String id) {
    if (students.containsKey(id)) {
      students.remove(id);
      return true;
    }
    return false;
  }

  public static void printFeeInvoice() {
    System.out.print("Enter Student’s ID: ");
    String id = scanner.next();

    // Check if the student exists
    if (!students.containsKey(id)) {
      System.out.println("Student with ID " + id + " not found.");
      return;
    }

    // Get the student object
    Student student = students.get(id);

    // Print the fee invoice based on the student type
    student.printInvoice();
  }

  public static void printListOfStudents() {
    List<String> phdStudents = new ArrayList<>();
    List<String> msStudents = new ArrayList<>();
    List<String> undergradStudents = new ArrayList<>();

    for (Map.Entry<String, Student> entry : students.entrySet()) {
      Student student = entry.getValue();
      if (student instanceof PhdStudent) {
        phdStudents.add(student.getName());
      } else if (student instanceof MsStudent) {
        msStudents.add(student.getName());
      } else if (student instanceof UndergraduateStudent) {
        undergradStudents.add(student.getName());
      }
    }

    System.out.println("\nPhD Students");
    System.out.println("------------");
    for (String name : phdStudents) {
      System.out.println("- " + name);
    }

    System.out.println("\nMS Students");
    System.out.println("------------");
    for (String name : msStudents) {
      System.out.println("- " + name);
    }

    System.out.println("\nUndergraduate Students");
    System.out.println("------------");
    for (String name : undergradStudents) {
      System.out.println("- " + name);
    }
  }

  public static void courseManagementMenu() {
    boolean exit = false;
    while (!exit) {
      System.out.println("\n-------------------");
      System.out.println("\nCourse Management Menu:" + "\n\n" + "Choose one of: \n");
      System.out.println("A - Search for a course or lab using the class/lab number");
      System.out.println("B - delete a class");
      System.out.println("C - Add a lab to a class");
      System.out.println("X - Back to main menu");
      System.out.print("\nEnter your selection: ");
      String option = scanner.next().toUpperCase();

      switch (option) {
        case "A":
          searchCourseOrLab();
          break;
        case "B":
          deleteCourseOrLab();
          break;
        case "C":
          addLabToCourse();
          break;
        case "X":
          exit = true;
          break;
        default:
          System.out.println("Invalid option. Please try again.");
      }
    }
  }

  public static void searchCourseOrLab() {
    System.out.print("\nEnter the Class/Lab Number: ");
    int crn = scanner.nextInt();
    scanner.nextLine(); // consume newline character
    String labRoom = "";
    try {
      List<String> lines = Files.readAllLines(Paths.get("lect.txt").toAbsolutePath());
      for (String line : lines) {
        String[] parts = line.split(",");
        ArrayList<String> parts2 = new ArrayList<String>();
        for (String S : parts) {
          parts2.add(S);
          // System.out.println(parts2);
        }
        // System.out.println(parts2.get(0));
        if (Integer.parseInt(parts2.get(0)) == crn && parts2.size() != 2) {
          System.out.println("[ " + parts2.get(0) + " , " + parts2.get(1) + " , " + parts2.get(2) + "]");
          return;
        } else {

          ArrayList<String> mainClass = new ArrayList<String>();
          for (String S : parts2) {
            mainClass.add(S);
          }
          // System.out.println("Searching for lab for: " + mainClass.get(0));
          int curentLine = lines.indexOf(line);

          do {
            // String temp =
            // Files.readAllLines(Paths.get("lect.txt").toAbsolutePath()).last();
            if (curentLine == lines.size() - 1) {
              System.out.println("[]");
              return;
            }
            curentLine++;
            String newLine = lines.get(curentLine);
            // System.out.println(newLine);
            parts = newLine.split(",");
            parts2.clear();
            for (String S : parts) {
              parts2.add(S);
              // System.out.println(parts2);
            }
            // System.out.println("comparing " + parts2.get(0));
            if (Integer.parseInt(parts2.get(0)) == crn && parts2.size() == 2) {
              System.out.println("\n");
              System.out.println(
                  "Lab for " + "[" + mainClass.get(0) + ", " + mainClass.get(1) + ", " + mainClass.get(2) + "]");
              System.out.println("Lab Room " + parts2.get(1));
              return;
            }

          } while (parts2.size() == 2);// end of while
        } // end of else

        if (!labRoom.isEmpty()) {
          System.out.println("Lab Room: " + labRoom);
        }

        /*
         * System.out.println("CRN: " + parts[0]);
         * System.out.println("Course Code: " + parts[1]);
         * System.out.println("Course Name: " + parts[2]);
         * System.out.println("Level: " + parts[3]);
         * System.out.println("Delivery: " + parts[4]);
         * System.out.println("Room: " + parts[5]);
         * System.out.println("Lab: " + (parts[6].equals("YES") ? "Yes" : "No"));
         * System.out.println("Credits: " + parts[7]);
         */

      } // end of lines for
      System.out.println("Course or lab not found.");
    } // end of try
    catch (IOException e) {
      System.out.println("Error reading file: " + e.getMessage());
    }
  }

  public static void deleteCourseOrLab() {
    System.out.print("Enter the Class/Lab Number: ");
    int crn = scanner.nextInt();
    scanner.nextLine(); // consume newline character

    try {
      List<String> lines = Files.readAllLines(Paths.get("lect.txt"));
      List<String> updatedLines = new ArrayList<>();
      boolean found = false;
      for (String line : lines) {
        String[] parts = line.split(",");
        if (Integer.parseInt(parts[0]) == crn) {
          System.out.println("[" + parts[0] + ", " + parts[1] + ", " + parts[2] + "]" + " deleted!");
          found = true;
        } else {
          updatedLines.add(line);
        }
      }
      if (!found) {
        System.out.println("Course or lab not found.");
      } else {
        Files.write(Paths.get("lect.txt"), String.join("\n", updatedLines).getBytes());
      }
    } catch (IOException e) {
      System.out.println("Error reading or writing file: " + e.getMessage());
    }
  }

    public static void addLabToCourse() {
        System.out.print("Enter the Class/Lab Number: ");
        int crn = scanner.nextInt();

        String labAdd = " ";
        String newLab = " ";
        String newRoom = " ";
        scanner.nextLine(); // consume newline character
            // System.out.println(parts2.get(0));
        //    if (Integer.parseInt(parts2.get(0)) == crn && parts2.size() != 2) {

        try {
            List<String> lines = Files.readAllLines(Paths.get("lect.txt"));
            List<String> updatedLines = new ArrayList<>();
            boolean found = false;
            for (String line : lines) {
                String[] parts = line.split(",");
                // System.out.println(parts2.get(0));
                if (Integer.parseInt(parts[0]) == crn) {

                    String hasLab = parts[6];
                    if (hasLab.equals("No")) {
                        System.out.println("This lecture does not have labs");
                        return;
                    }

                    if (hasLab.equals("YES")) {
                        System.out.println("Enter the lab number you will add: ");
                        newLab = scanner.nextLine();
                        System.out.println("Enter the room number of the lab: ");
                        newRoom = scanner.nextLine();
                        labAdd = (newLab + "," + newRoom);
                        found = true;
                    }

                }
                if (Integer.parseInt(parts[0]) == crn) {
                    updatedLines.add(line);
                    updatedLines.add(labAdd);
                }
                else {
                    updatedLines.add(line);
                }
            }
            if (!found) {
                System.out.println("No Such Lecture Exists!");
            } else {
                Files.write(Paths.get("lect.txt"), String.join("\n", updatedLines).getBytes());
            }
        } catch (IOException e) {
            System.out.println("Error reading or writing file: " + e.getMessage());
        }
    }
}

abstract class Student {
  private String name;
  private String id;

  public Student(String name, String id) {
    this.setName(name);
    this.setId(id);
  }

  public String getName() {
    return name;
  }

  public String getId() {
    return id;
  }

  public abstract void printInvoice();

  public void setName(String name) {
    this.name = name;
  }

  public void setId(String id) {
    this.id = id;
  }
}

class UndergraduateStudent extends Student {
    private double tuitionPerCreditHour;
    private double totalCost;
    private List<String> enrolledCourses;

    public UndergraduateStudent(String name, String id, List<String> enrolledCourses) {
        super(name, id);
        this.tuitionPerCreditHour = 120.25;
        this.enrolledCourses = (List<String>) (enrolledCourses != null ? enrolledCourses : new ArrayList<>());
    }
    

    public void setUndergradName(String Name) {
        this.setName(Name);
      }

      public String getUndergradName() {
        return getName();
      }

      public void setUndergradId(String id) {
        this.setId(id);
      }

      public String getUndergradId() {
        return getId();
      }

      @Override
      public void printInvoice() {
          System.out.println("\nVALENCE COLLEGE");
          System.out.println("ORLANDO FL 10101");
          System.out.println("---------------------");
          System.out.println("\nFee Invoice Prepared for:");
          System.out.println(getId() + " - " + getName());
          System.out.println("\n");
          System.out.println("1 Credit Hour = $" + tuitionPerCreditHour);
          System.out.println("\n");
          System.out.println("CRN\tCR_PREFIX\tCR_HOURS\tCost");

          try {
              List<String> lines = Files.readAllLines(Paths.get("lect.txt"));
              for (String line : lines) {
                  String[] parts = line.split(",");
                  // Check if the parts array has enough elements
                  if (parts.length >= 8) { // Ensure there are at least 8 elements
                      // Assuming the CRN is at index 0 and course code is at index 1
                      int crn = Integer.parseInt(parts[0].trim());
                      String crPrefix = parts[1].trim();
                      int crHours = Integer.parseInt(parts[7].trim()); // Assuming credits are at index 7
                      double cost = crHours * tuitionPerCreditHour;
                      System.out.println(crn + "\t" + crPrefix + "\t\t" + crHours + "\t\t$" + cost);
                      System.out.println("-----------------------------------------------");
                      double total = cost + 35;
                      System.out.printf("                                        $%.2f%n", total);
                  } else if (parts.length >= 6) { // Check if the parts array has at least 6 elements
                      // Handle cases where there are fewer elements
                      // Assuming the CRN is at index 0 and course code is at index 1
                      int crn = Integer.parseInt(parts[0].trim());
                      String crPrefix = parts[1].trim();
                      // Assuming credits are not available, set to 0
                      int crHours = 0;
                      double cost = 0.0;
                      System.out.println(crn + "\t" + crPrefix + "\t\t" + crHours + "\t\t$" + cost);
                      System.out.println("-----------------------------------------------");
                      double total = cost + 35;
                      System.out.printf("                                        $%.2f%n", total);
                  } else {
                      System.out.println("Invalid format for line: " + line);
                  }
              }
          } catch (IOException e) {
              System.out.println("Error reading file: " + e.getMessage());
          }
      }

   
    // Additional methods to set and get total cost
    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public double getTotalCost() {
        return totalCost;
    }
}

abstract class GraduateStudent extends Student {
  private double researchFee;

  public GraduateStudent(String name, String id) {
    super(name, id);
    this.researchFee = 700.00;
  }

  public double getResearchFee() {
    return researchFee;
  }
}

class PhdStudent extends GraduateStudent {
  private String advisor;
  private String researchSubject;
  private List<String> supervisedLabs;

  public PhdStudent(String name, String id, String advisor, String researchSubject, List<String> classCodeList) {
    super(name, id);
    this.advisor = advisor;
    this.researchSubject = researchSubject;
    this.supervisedLabs = classCodeList;
  }

  @Override
  public void printInvoice() {
    System.out.println("\nVALENCE COLLEGE");
    System.out.println("ORLANDO FL 10101");
    System.out.println("---------------------");
    System.out.println("\nFee Invoice Prepared for:");
    System.out.println(getId() + " - " + getName());
    System.out.println("\n");
    System.out.println("RESEARCH");
    System.out.println("\n");
    System.out.println("                   Health & id fees\t$" + 35);
    System.out.println("-----------------------------------------------");
  }
}

class MsStudent extends GraduateStudent {
  public MsStudent(String name, String id, double totalCost) {
    super(name, id);
  }

  @Override
  public void printInvoice() {
    System.out.println("\nVALENCE COLLEGE");
    System.out.println("ORLANDO FL 10101");
    System.out.println("---------------------");
    System.out.println("\nFee Invoice Prepared for:");
    System.out.println(getId() + " - " + getName());
    System.out.println("\n");
    System.out.println("1 Credit Hour = $300.00");
    System.out.println("\n");
    System.out.println("CRN\tCR_PREFIX\tCR_HOURS\tCost");
    System.out.println("                   Health & id fees\t$" + 35);
    System.out.println("-----------------------------------------------");
  }
}

class IdException extends Exception {
  public IdException() {
    super("Invalid id format or ID already exists");
  }
}
